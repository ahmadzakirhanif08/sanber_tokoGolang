basePath: /api
definitions:
  handlers.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/handlers.OrderItemRequest'
        minItems: 1
        type: array
    required:
    - items
    type: object
  handlers.OrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:8080
info:
  contact: {}
  description: Backend API untuk sistem e-commerce sederhana.
  title: Mini E-Commerce REST API - Golang Final Project
  version: "1.0"
paths:
  /orders:
    post:
      consumes:
      - application/json
      description: Authenticated user creates an order, triggering database transaction
        and stock deduction.
      parameters:
      - description: Order Items List
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request (Invalid items, quantity, or insufficient stock)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized (Missing or invalid token)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error (Transaction failed)
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new order
      tags:
      - Orders
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns JWT token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with default 'user' role.
      parameters:
      - description: User Registration Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request (Invalid input)
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict (Username or email already exists)
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
